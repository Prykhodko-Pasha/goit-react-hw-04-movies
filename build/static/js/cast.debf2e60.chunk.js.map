{"version":3,"sources":["components/Cast/Cast.module.css","components/CastItem/CastItem.module.css","components/CastItem/CastItem.js","components/Cast/Cast.js"],"names":["module","exports","CastItem","name","profile_path","character","photoSrc","className","s","alt","CastItem__img","src","CastItem__info","CastItem__name","CastItem__character","Cast","useState","cast","setCast","status","setStatus","errorMessage","setErrorMessage","movieId","useParams","useEffect","window","scrollTo","top","innerHeight","behavior","fetchMovieCast","then","data","length","usableCastKeysArr","map","id","catch","err","Loader","index"],"mappings":"4HACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,eAAiB,iCAAiC,cAAgB,gCAAgC,eAAiB,iCAAiC,oBAAsB,wC,kKCEnN,SAASC,EAAT,GAAsD,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,UAE/CC,EAAWF,EAAY,UADZ,uCACY,OACXA,GACd,iDAEJ,OACE,qBAAIG,UAAWC,IAAEN,SAAjB,UACE,qBAAKO,IAAG,UAAKN,EAAL,UAAmBI,UAAWC,IAAEE,cAAeC,IAAKL,IAC5D,sBAAKC,UAAWC,IAAEI,eAAlB,UACE,mBAAGL,UAAWC,IAAEK,eAAhB,SAAiCV,IACjC,oBAAGI,UAAWC,IAAEM,oBAAhB,uBAEE,uBACCT,WCVI,SAASU,IACtB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,QAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAwCJ,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEQC,EAAYC,cAAZD,QAwCR,OAtCAE,qBAAU,WACRC,OAAOC,SAAS,CACdC,IAAKF,OAAOG,YAAc,EAC1BC,SAAU,cAIdL,qBAAU,WACRL,EAAU,WAEVW,YAAeR,GACZS,MAAK,SAAAC,GAEJ,GAAyB,IAArBA,EAAKhB,KAAKiB,OACZd,EAAU,YACVE,EAAgB,2BACX,CACL,IAAMa,EAAoBF,EAAKhB,KAAKmB,KAClC,YACE,MAAO,CACLC,GAFuC,EAAxCA,GAGClC,KAHuC,EAApCA,KAIHC,aAJuC,EAA9BA,aAKTC,UALuC,EAAhBA,cAU7Ba,EAAQiB,GACRf,EAAU,gBAGbkB,OAAM,SAAAC,GACLnB,EAAU,YACVE,EAAgB,sBAAD,OAAuBiB,SAEzC,CAAChB,IAGF,qCACc,YAAXJ,GAAwB,cAACqB,EAAA,EAAD,IACb,aAAXrB,GAAyB,mBAAGZ,UAAU,MAAb,SAAoBc,IAClC,aAAXF,GACC,oBAAIZ,UAAWC,IAAEO,KAAjB,SACGE,EAAKmB,KAAI,WAAoCK,GAApC,IAAGtC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,UAAvB,OACR,cAACH,EAAD,CAEEC,KAAMA,EACNC,aAAcA,EACdC,UAAWA,GAHNoC","file":"static/js/cast.debf2e60.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cast\":\"Cast_Cast__2HtpZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CastItem\":\"CastItem_CastItem__3LPuC\",\"CastItem__info\":\"CastItem_CastItem__info__3fkso\",\"CastItem__img\":\"CastItem_CastItem__img__h018u\",\"CastItem__name\":\"CastItem_CastItem__name__2_VC8\",\"CastItem__character\":\"CastItem_CastItem__character__2boy4\"};","import PropTypes from 'prop-types';\r\nimport s from './CastItem.module.css';\r\n\r\nexport default function CastItem({ name, profile_path, character }) {\r\n  const BASE_URL = 'https://image.tmdb.org/t/p/original';\r\n  const photoSrc = profile_path\r\n    ? `${BASE_URL}${profile_path}`\r\n    : 'https://api.lorem.space/image/face?w=200&h=300';\r\n\r\n  return (\r\n    <li className={s.CastItem}>\r\n      <img alt={`${name}_photo`} className={s.CastItem__img} src={photoSrc} />\r\n      <div className={s.CastItem__info}>\r\n        <p className={s.CastItem__name}>{name}</p>\r\n        <p className={s.CastItem__character}>\r\n          Character:\r\n          <br />\r\n          {character}\r\n        </p>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nCastItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  profile_path: PropTypes.string,\r\n  character: PropTypes.string.isRequired,\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport s from './Cast.module.css';\r\nimport { fetchMovieCast } from '../../services/movies-api';\r\nimport Loader from '../Loader/Loader';\r\nimport CastItem from '../CastItem/CastItem';\r\n\r\nexport default function Cast() {\r\n  const [cast, setCast] = useState([]);\r\n  const [status, setStatus] = useState('idle');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const { movieId } = useParams();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo({\r\n      top: window.innerHeight / 2,\r\n      behavior: 'smooth',\r\n    });\r\n  }); /* скролл на півекрана вниз */\r\n\r\n  useEffect(() => {\r\n    setStatus('pending');\r\n\r\n    fetchMovieCast(movieId)\r\n      .then(data => {\r\n        // console.log(data);\r\n        if (data.cast.length === 0) {\r\n          setStatus('rejected');\r\n          setErrorMessage('There is no cast...');\r\n        } else {\r\n          const usableCastKeysArr = data.cast.map(\r\n            ({ id, name, profile_path, character }) => {\r\n              return {\r\n                id,\r\n                name,\r\n                profile_path,\r\n                character,\r\n              };\r\n            },\r\n          );\r\n\r\n          setCast(usableCastKeysArr);\r\n          setStatus('resolved');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        setStatus('rejected');\r\n        setErrorMessage(`There is an error: ${err}`);\r\n      });\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <>\r\n      {status === 'pending' && <Loader />}\r\n      {status === 'rejected' && <p className=\"Msg\">{errorMessage}</p>}\r\n      {status === 'resolved' && (\r\n        <ul className={s.Cast}>\r\n          {cast.map(({ name, profile_path, character }, index) => (\r\n            <CastItem\r\n              key={index}\r\n              name={name}\r\n              profile_path={profile_path}\r\n              character={character}\r\n            />\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}